* TODO serious time
** DONE do actually use metatables, not classes
** DONE subdivided draw depth list
** TODO make menus nice
Menus should be primarily graphical.
menu.lua should create a runnable menu state from a set of data.
submenus should work as separate states.
the menu data itself should be as minimal as possible.
*** TODO menu example file
*** TODO rewrite existing menus
*** TODO convert current fonts to grid mono
** DONE battle chips
*** DONE chip UI
*** DONE example folder
*** DONE interface battle chips with player
I chose concept B. queue.lua exists as helper functions, but because queue
is just an array data type, I didn't bother with anything else.

Concept A: Queue.lua file; When the chip UI is brought up, a Queue data
type is passed to it. When the player wants to do things with this
queue, there's helper functions attatched to the queue to make it
work.

Concept B: The player holds the queue, and queue.lua just takes in
that queue. No functions neccessarily attatched.
*** DONE bullet
*** DONE boots
*** DONE wheel crate
*** DONE poison
*** DONE allow chip to affect actor state
** TODO make chips do more stuff
*** TODO whlcrate damaging enemies
*** TODO poisdrop throw animation
*** TODO boots push whlcrate
** TODO make enemies use attacks (chips)
** TODO give player HP, death
** TODO battle status info
** TODO deck editor
Select which chips out of your pool of chips
to put into a given deck.
** TODO debug stuff
*** TODO any chip selector
*** TODO RAM, CPU, video info
** TODO table value to draw previous state no matter what
* TODO aesthetic
** TODO player
** TODO enemy
** TODO more cool/trippy bg's
** TODO sound effects
 - Unified sound playback method; limits number of channels intelligently
 - named sound sources, searchable, etc.
** DONE crisp XM playback (supposedly)
** TODO compose music
** TODO add shine on panels
* TODO back burner
** DONE unified actor animation and state model
** DONE asset management
Well, now I know. RAM usage or object counts would help, but I think
that lua now knows when to GC things, and I make sure that images are
only loaded once.

Not really sure what is meant by this, probably better just to null out
assets when battles end, etc.
** DONE custom mono fonts via ascii grid style + spritebatch
** TODO lazy depth calculation
Calculate depth on each draw call, then update that to be only when
things move. Maintain a drawn game state, essentially.
** TODO joypad
** TODO keyboard and game configs
 1. Readable
 2. Writable
** TODO multiplayer
Get two players up that can fight each o ther.
** TODO FPS independance via threads (if stable)
* DONE initial game
** DONE auto-sorting draw list (z-buffer)
https://love2d.org/wiki/Skip_list:Drawing_Order
** DONE drawing class w/organization
** DONE custom fonts
** DONE 6x3 grid
** DONE movement
** DONE debug menus
** DONE battle objects (bullets, etc.)
** DONE hitboxes/collision
** DONE debug menus
* DONE rewrite
** DONE no more "actor"
** DONE image asset management
** DONE nicer animation system
Have rows, speeds in FPS.
FPS speeds were never really needed, I guess.
** DONE damage management
** DONE drawing origins
** DONE all actors with states
** DONE non-object panels
** DONE no more signals
Signals are dumb because they're really messy
** DONE no more "data"
** DONE 240x160
