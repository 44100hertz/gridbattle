Let me say, it was too much work to refactor this code. I should have left it to die, but I was insistent that there was something good to make of it. Please find a more reasonable way of following your dreams and tell me about it because I'd like to know.

My todo file was organized into arbitrary categories. There wasn't much to guide my process. I deleted the whole thing and remade it, and I'm not afraid to do it again.

Things that I wanted to learn before making this game were only bogging down the development process. It's wonderful that I want to learn these things, but it's not so wonderful to say that before I make a game, I need to learn to compose music, or to write glsl shaders. What if those things take a lot of time and effort? I don't care that they're a part of my dream, what I care about is making a good game. My dream is to make something good, not to have exactly the thing I'm dreaming about. My control fantasy is exactly what let things get out of control.

I was insistent on avoiding the use of OOP, which means I ran into all sorts of issues. For example, I implemented a memory usage meter (via collectgarbage'count') to make sure that I wasn't slowly filling up RAM. It was up to me to initialize and de-initialize everything more or less manually! I also didn't actually avoid the use of OOP! I used an esoteric and inheritance-heavy OOP system, but only for game actors! That system has been replaced by this one. I should not have based my code on avoidance of certain concepts. I should be willing to embrace any concept that can improve my code. Don't let an anti-OOP rant on youtube ruin your sense of practicality!

If I wanted multiple of something, either use dofile or begrudgingly use OOP. I wanted to use more or less pure functions, but there was never anywhere nice to store my state! I also had dependency order issues!

I wanted my code to be short. Every time I tried to reduce the amount of code I ended up hurting the structure and clarity of the code as well. Longer names are fine. Dumber, longer code is good. Less characters doesn't matter, and less typing only matters if I have to type WAAAY too much.

My code was fine, until I 'migrated resources'. I separated the 'source' and 'resource' folders, with the goal of organization and a replaceable resource folder. What ended up happening is that the two folders were heavily coupled, and I had to re-merge them for my code to really make sense.

After writing my image loader, I also moved my images from being strewn about the source files into a single location.

It takes a lot of time and investment to fix bad code. The more you learn about a codebase, the more you can identify its patterns, but knowing those patterns isn't enough. You have to come up with techniques to turn the disorganized code into organized code, like untangling spaghetti, because of the way that things are coupled so heavily. I know it's not ideal, but big messy commits during refactoring have to happen.

I tried to reinvent parts of love2d, to the point where this project was at one point ported to sdl2. All I really did was make a bunch of sloppy systems that often copied love2d features, except in _my_ lua (NIH syndrome for sure!). There are some useful things, like src/image.lua, but most of it is not needed. Examples would be the font system that totally ignores love's built in fonts, and also the "z-buffer" system for drawing order that ended up not being needed at all.